##########################################################################
# Config Yaml Version:     1.0
# Description:             Yaml file to run Snakefile Filt3r module
##########################################################################
# PROD version 1 : 28/11/2023
# Authoring : Thomas LAVAUX
################## Directories and variables ##################
# Name of the module = {serviceName} from listener.py/launcher.py
serviceName: "FILT3R"
# Specify a DATE_TIME value (for rerun)
DATE_TIME: ""
# Output directory
OUTPUT_DIR: ""
# Other path to copy results, leave empty to not copy, add a path to copy to this folder
# Replace by "depository" will copy the results in a second folder based on OUTPUT_DIR, replacing "repository" with "depository" if repository exist
DEPOT_DIR: "depository"
# Default path to the input datas == {run} from listener.py/launcher.py
run: ""

# Bed file
BED_FILE: ""
# Genes file
GENES_FILE: ""
# Transcripts file
TRANSCRIPTS_FILE: ""
# List genes
LIST_GENES: ""

# Files to index into the dictionary depending on extension (endwith)
EXT_INDEX_LIST : [".cram", ".cram.crai", ".transcripts", ".manifest.genes", ".design.bed", ".bam", ".bam.bai", ".R1.fastq.gz", ".R2.fastq.gz"]
# List of files extension to process
PROCESS_FILE: ['.bam']
#PROCESS_FILE: [".R1.fastq.gz", ".R2.fastq.gz"]
# How to copy input files (bam, bai, cram) : ln or leave empty (it will rsync files or index for bai from bam)
PROCESS_CMD: 'ln'
# Append an aligner name if no empty (from sample.bam to sample.alignername.bam)
ALIGNER_NAME:
# Only analyse sample.validation.aligner.bam/cram files
VALIDATION_ONLY: False

# Samples list exclusion (not to be analysed) ; exclude if startwith, case insensitive
EXCLUDE_SAMPLE: ['POOL_', 'BlcADN', 'blanc', 'BlcPCR', 'blcPCR', 'Z_NTC', 'NTC', 'Blc']
# Sample filter : only analyse those samples
FILTER_SAMPLE: []

# Extension files to copy after pipeline success
# using brace extension, remove space between extensions
INCLUDE_RSYNC: "{'*.vcf.gz.tbi','*.vcf.gz','*/'}"
# Extensions files to copy after pipeline failure
INCLUDE_LOG_RSYNC: "{'*.log','*.err','*Failed.txt'}"

# Search parameters
RECURSIVE_SEARCH: False
SEARCH_ARGUMENT: ["/*/STARK/*"]

# List of extensions to include in the report.html
RESULT_EXT_LIST: ['.vcf.gz', '.vcf.gz.tbi']
# Path of the template (template is serviceName_template.html)
TEMPLATE_DIR: "/app/template"

################## Tools parameters ##################
# Folder to store dummy.vcf for ex
DUMMY_PATH: "/app/scripts/dummy"
# Option to filter vcf with bcftools
# ex "-i 'FORMAT/DP>=30 && FORMAT/VAF>=0.01'"
BCFTOOLS_FILTER: "-i 'INFO/VAF>=0.01'"
# Default path to a FASTA file with .fasta reference genome (hg19/hg38 for ex)
REFGENEFA_PATH: "/STARK/databases/genomes/current/hg19.fa"
################## filt3r ##################
# Path of the filt3t executable ("/filt3r" if build with gitlab, "/app/bin" for the precompiled one)
FILTER_PATH: "/filt3r"
# Maximal length of the indels to ignore (default 0)
SHORT_INDELS: "2" 
# Kmer size (default 12)
KMER: "12"
# GRCH37 or 38 refrence fasta sequence for FLT3
ITDREF: "/STARK/databases/ITDs/FLT3/filt3r/hg19/flt3_hg19.fa"