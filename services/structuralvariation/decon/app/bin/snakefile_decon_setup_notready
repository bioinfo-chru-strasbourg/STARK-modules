### WIP ###
## Not working yet ###
## TL 01/20/2024

################## Import libraries ##################
import os
import yaml
import logging

# Set up logging
logging.basicConfig(
    filename='/app/logs/snakefile.log',
    level=logging.DEBUG,  # You can adjust the logging level as needed
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger()

################## Configuration file ##################
configfile: "/app/config/snakefile/decon_default_setup.yaml"

# Load configuration
try:
    with open(configfile, 'r') as f:
        config = yaml.safe_load(f)
        ANNOTSV_VERSION = config['ANNOTSV_VERSION']
except Exception as e:
    logger.error(f"Failed to load configuration file {configfile}: {e}")
    raise

DATABASES = os.getenv('DOCKER_STARK_INNER_FOLDER_DATABASES')  # DATABASES = "/STARK/databases"
serviceName = os.getenv('DOCKER_STARK_MODULE_SUBMODULE_NAME')  # serviceName = "decon"
moduleName = os.getenv('DOCKER_STARK_MODULE_NAME')  # moduleName = "structuralvariation"
services_folder = os.getenv('DOCKER_STARK_INNER_FOLDER_SERVICES')
config_folder = os.getenv('DOCKER_STARK_INNER_FOLDER_CONFIG')

# Log environment variables
logger.info(f"DATABASES: {DATABASES}")
logger.info(f"serviceName: {serviceName}")
logger.info(f"moduleName: {moduleName}")
logger.info(f"services_folder: {services_folder}")
logger.info(f"config_folder: {config_folder}")

# Rule to define the setup process
rule all:
    input:
        expand(f"{services_folder}/cli/SETUPComplete.txt"),
        expand(f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/COSMIC/GRCh37/CosmicCompleteCNA.tsv.gz"),
        expand(f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/RegulatoryElements/{config['GENEHANCER_VERSION']}")

rule download_and_extract_annotSV:
    output:
        log=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/setup.log",
        err=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/setup.err",
        directory="{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/"
    shell:
        """
        mkdir -p {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/
        aria2c --async-dns=false -c -s 16 -x 16 -k 1M -j 1 https://www.lbgi.fr/~geoffroy/Annotations/Annotations_Human_{ANNOTSV_VERSION}.tar.gz -d {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/ 1>> {output.log} 2>> {output.err}
        tar xzf {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human_{ANNOTSV_VERSION}.tar.gz -C {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/ 1>> {output.log} 2>> {output.err}
        """
    log:
        logger.info(f"Started downloading and extracting AnnotSV version {ANNOTSV_VERSION}")
        logger.info(f"Log file: {output.log}, Error file: {output.err}")

rule download_exomiser_data:
    output:
        log=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/setup.log",
        err=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/setup.err",
        directory="{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/"
    shell:
        """
        mkdir -p {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/{TOOL_VERSION}/
        aria2c --async-dns=false -c -s 16 -x 16 -k 1M -j 1 https://data.monarchinitiative.org/exomiser/data/{TOOL_VERSION}_hg19.zip -d {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/{TOOL_VERSION}/ 1>> {output.log} 2>> {output.err}
        unzip -q {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/{TOOL_VERSION}_hg19.zip -d {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/{TOOL_VERSION}/ 1>> {output.log} 2>> {output.err}
        cp -r /app/config/annotsv/exomiser-rest-prioritiser-12.1.0.jar {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Exomiser/{TOOL_VERSION}/jar >> {output.log} 2>> {output.err}
        """
    log:
        logger.info(f"Started downloading Exomiser data version {TOOL_VERSION}")
        logger.info(f"Log file: {output.log}, Error file: {output.err}")

rule install_cosmic:
    output:
        file=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/COSMIC/GRCh37/CosmicCompleteCNA.tsv.gz"
    shell:
        """
        mkdir -p {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/COSMIC/GRCh37/
        mv {services_folder}/setup/COSMIC/CosmicCompleteCNA.tsv.gz {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/COSMIC/GRCh37/
        """
    log:
        logger.info(f"Started installing COSMIC data")

rule install_genecards:
    output:
        file=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/RegulatoryElements/{config['GENEHANCER_VERSION']}"
    params: config['GENEHANCER_VERSION']
    shell:
        """
        mkdir -p {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/RegulatoryElements/
        unzip -q {services_folder}/setup/GENEHANCER/{params} -d {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/Annotations_Human/FtIncludedInSV/RegulatoryElements/
        """
    log:
        logger.info(f"Started installing GeneCards data")

rule copy_config_files:
    output:
        log=f"{config_folder}/listener/logs/{SERVICE_NAME}.{date_time}.setup.log",
        err=f"{config_folder}/listener/logs/{SERVICE_NAME}.{date_time}.setup.err"
    shell:
        """
        mkdir -p {config_folder}/listener
        cp -r /app/config/module/* {config_folder}/listener >> {output.log} 2>> {output.err}
        cp -r /app/config/snakefile/* {config_folder}/cli >> {output.log} 2>> {output.err}
        """
    log:
        logger.info(f"Started copying configuration files")
        logger.info(f"Log file: {output.log}, Error file: {output.err}")

rule create_dummy_vcf:
    output:
        file=f"{DATABASES}/AnnotSV/{ANNOTSV_VERSION}/AnnotSV.dummyannotation.tsv"
    shell:
        """
        AnnotSV -SVinputFile /app/scripts/dummy/dummy.vcf -annotationsDir {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/ -outputFile {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/AnnotSV.dummyannotation.tsv -genomeBuild GRCh37 1> {DATABASES}/AnnotSV/{ANNOTSV_VERSION}/AnnotSV.dummyannotation.log
        """
    log:
        logger.info(f"Started creating dummy VCF file")

rule mark_setup_complete:
    output:
        file=f"{services_folder}/cli/SETUPComplete.txt"
    shell:
        """
        touch {services_folder}/cli/SETUPComplete.txt
        """
    log:
        logger.info(f"Setup process marked as complete")
