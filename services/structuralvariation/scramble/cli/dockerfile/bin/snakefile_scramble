##########################################################################
# Snakemakefile Version:   3.0
# Description:             Snakemake file to run SCRAMBLE module
##########################################################################

# DEV version 0.1 : 10/11/2021
# INT version 0.1 : 17/03/2022
# PROD version 1 : 03/06/2022
# Authoring : Thomas LAVAUX

# PROD version 2 : 14/10/2022 changelog
	# remove panel vcf filtering (output was essentially empty) ; rename full to unfiltered
	# exclude samples list case insensitive
	# copying new analysis per sample in the root sample dir & removing the old ones
	# add vcf2tsv converter (https://github.com/sigven/vcf2tsvpy) & corresponding rules : each vcf will be convert to tsv
	# correct run path by removing ending '/' if exist
	# keep "Running.txt" file if failed, avoiding multiple analysis launch by the listener

# PROD version 3 : 19/09/2023 changelog
	# AnnotSV version 3.3.7 (include the vcf converter)
	# Add the deletion mode
	# refactor snakemake code a lot

################## Import libraries ##################
import os
import glob
import pandas as pd
import json
import csv
from shutil import copy2
from datetime import datetime
from itertools import product
from collections import defaultdict
from jinja2 import Environment, FileSystemLoader

################## Configuration file ##################
configfile: "/app/config/snakefile/default.yaml"

####################### FUNCTIONS #####################
def parse_samplesheet(samplesheet_path):
	"""
	samplesheet_path: absolute path of a samplesheet file, Illumina format
	return: a dataframe containing 9 columns :
	Sample_ID, Sample_Plate, Sample_Well, I7_Index_ID, index, Manifest, GenomeFolder, Sample_Project, Description
	The description field contains tags separated by ! ; the name of the tag and the value is separated by # (ex: SEX#F!APP#DIAG.BBS_RP)
	"""
	header_line = next(line.strip().split(',') for line in open(samplesheet_path) if 'Sample_ID' in line)
	df = pd.read_csv(samplesheet_path, skiprows=1, names=header_line)
	df['Description'] = df['Description'].apply(lambda x: dict(item.split('#') for item in x.split('!')))
	
	return df

def getSampleInfos(samplesheet_path, exclude_samples):
	"""
	samplesheet_path: absolute path of a samplesheet file, Illumina format
	return a dictionary with Sample_ID from samplesheet as key and 'gender': 'F or M or NULL'
	"""
	result_dict = {}
	
	if samplesheet_path:
		samplesheet = parse_samplesheet(samplesheet_path)
		
		for _, rows in samplesheet.iterrows():
			sampleID = rows["Sample_ID"]
			
			if any(exclude in sampleID for exclude in exclude_samples):
				continue
			
			result_dict[sampleID] = {'gender': next((tag.split('_')[-1] for tag in rows['Description'].split('!') if 'SEX' in tag), '')}
	
	return result_dict

def populate_dictionary(dictionary, samples_list, extensions_list, files_list, pattern_include=None, pattern_exclude=None):
	for sample in samples_list:
		for ext in extensions_list:
			for file in files_list:
				if pattern_exclude:
					if os.path.basename(file).split(".")[0] == sample and os.path.basename(file).endswith(ext) and not pattern_exclude in file:
						dictionary[sample][ext] = file
				if pattern_include:	
					if os.path.basename(file).split(".")[0] == sample and os.path.basename(file).endswith(ext) and pattern_include in file:
						dictionary[sample][ext] = file
			
def find_item_in_dict(sample_list, ext_list, dictionary, include_ext, exclude_ext):
	""" Function to search in a dictionary for a non-empty file path by iterating through sample_list and ext_list with inclusion and exclusion filters """
	search_result = ""
	
	for sample in sample_list:
		for ext in ext_list:
			try:
				items = dictionary.get(sample, {}).get(ext, [])
				if include_ext in items and exclude_ext not in items:
					if os.path.exists(items) and os.path.getsize(items) != 0:
						search_result = items
			except KeyError:
				pass
	
	return search_result

def searchfiles(directory, search_arg, recursive_arg):
	""" Function to search all files in a directory, adding a search arguement append to the directory and a recursive_search options (True/False) """
	return sorted(filter(os.path.isfile, glob.glob(directory + search_arg, recursive=recursive_arg)))

def log_file(logfile, text, sep, items_list=None, items=None):
	""" Function to log a variable value or a list of values into a log file """
	with open(logfile, 'a+') as f:
		f.write(f"{text}{sep}")
		if items_list:
			for item in items_list:
				f.write(f"{str(item) if item != '' else 'None'}{sep}")
		else:
			f.write(f"{str(items) if items != '' else 'None'}{sep}")

def extractlistfromfiles(file_list, ext_list, sep, position):
	""" Function for creating list from a file list, with a specific extension, a separator and the position of the string we want to extract """
	return list(set(os.path.basename(files).split(sep)[position] for files in file_list if any(files.endswith(ext) for ext in ext_list)))

def generate_html_report(result_dict, output_file='report.html'):
	# Set up Jinja2 environment
	template_dir = '/app/template'
	env = Environment(loader=FileSystemLoader(template_dir))
	template = env.get_template('template.html')

	# Render the template with the provided data
	rendered_html = template.render(data=result_dict)

	# Save the rendered HTML to the output file
	with open(output_file, 'w') as f:
		f.write(rendered_html)

	print(f"HTML report generated successfully: {output_file}")

### END OF FUNCTIONS ###
serviceName = config['serviceName']
date_time = datetime.now().strftime("%Y%m%d-%H%M%S")
runName = os.path.basename(os.path.normpath(config['run']))
inputDir = f"/app/res/{runName}/{date_time}/input"
tmpDir = f"/app/res/{runName}/{date_time}/tmp"
logfile = f"{tmpDir}/{serviceName}.{date_time}.parameters.log"
outputdir = config['OUTPUT_DIR'] if config['OUTPUT_DIR'] else config['run']

try:
	config['GROUP_NAME'] = os.path.normpath(config['run']).split('/')[4]
	config['APP_NAME'] = os.path.normpath(config['run']).split('/')[5]
except IndexError: 
	pass
depotdir = f"{config['depository']}/{config['GROUP_NAME']}/{config['APP_NAME']}/{runName}"

directories = [inputDir, tmpDir, outputdir]
if config['DEPOT_COPY']:
	directories.append(depotdir)
for directory in directories:
	os.makedirs(directory, exist_ok=True)

# Search files in repository 
files_list = searchfiles(os.path.normpath(config['run']), config['SEARCH_ARGUMENT'],  config['RECURSIVE_SEARCH'])

# Create sample and aligner list
sample_list = extractlistfromfiles(files_list, config['PROCESS_FILE'], '.', 0)
aligner_list = extractlistfromfiles(files_list, config['PROCESS_FILE'], '.', 1)

# Exclude samples from the exclude_list , case insensitive
sample_list = [sample for sample in sample_list if not any(sample.upper().startswith(exclude.upper()) for exclude in config['EXCLUDE_SAMPLE'])]

# If filter_sample_list variable is not empty, it will force the sample list
if config['FILTER_SAMPLE']:
	sample_list = list(config['FILTER_SAMPLE'])

# For validation analyse bam will be sample.aligner.validation.bam, so we append .validation to all the aligner strings
if config['VALIDATION_ONLY']:
	append_aligner = '.validation'
	aligner_list = [sub + append_aligner for sub in aligner_list]

runDict = defaultdict(dict)
populate_dictionary(runDict, sample_list, config['EXT_INDEX_LIST'], files_list, None, 'validation')
print(dict(runDict))

# Find bed file (Design)
config['BED_FILE'] = config['BED_FILE'] or find_item_in_dict(sample_list, config['EXT_INDEX_LIST'], runDict, '.design.bed', '.genes.bed')
# Find genes file (Panel); we can't use .genes files because .list.genes and .genes are not distinctable from the indexing we made
config['GENES_FILE'] = config['GENES_FILE'] or find_item_in_dict(sample_list, config['EXT_INDEX_LIST'], runDict, '.genes.bed', '.list.genes')
# Find list.genes files 
config['LIST_GENES'] = config['LIST_GENES'] or find_item_in_dict(sample_list, config['EXT_INDEX_LIST'], runDict, '.list.genes', '.list.transcripts')
# Find transcripts files (NM)
config['TRANSCRIPTS_FILE'] = config['TRANSCRIPTS_FILE'] or find_item_in_dict(sample_list, config['EXT_INDEX_LIST'], runDict, '.transcripts', '.list.transcripts')
# If transcript file exist, create the annotation file for AnnotSV
annotation_file = f"{tmpDir}/{serviceName}.{date_time}.AnnotSV.txt"
if os.path.exists(config['TRANSCRIPTS_FILE']) and os.path.getsize(config['TRANSCRIPTS_FILE']):
	df = pd.read_csv(config['TRANSCRIPTS_FILE'], sep='\t', names=["NM", "Gene"])
	with open(annotation_file, 'w+') as f:
		f.write('\t'.join(df['NM']))
else:
	with open(annotation_file, 'w') as f:
		f.write("No NM found")

# Transform list_genes into a list if list_genes exist, else use genes_file if exist
panel_list = []
panel_list_trunc = []
if config['LIST_GENES']:
	with open(config['LIST_GENES']) as f:
		panel_list = f.read().splitlines()
elif config['GENES_FILE'] and not config['LIST_GENES']:
	panel_list.append(os.path.basename(config['GENES_FILE']).split(".bed",1)[0]) # we split the .bed ext because list don't have .bed but genes_file does
# cp files from panel_list to inputDir and rename them
for panel in panel_list:
	inputfile = f"{os.path.dirname(config['LIST_GENES'])}/{panel}.bed"# panel_list don't have the bed extension, need that for the copy
	# cut sample. and .genes from file name so files will have the same name as the truncated name list
	panel_trunc = panel.split(".", 1)[1].split(".genes",1)[0]
	outputfile = f"{tmpDir}/{panel_trunc}"
	copy2(inputfile, outputfile)
	# Create a new list for expand, names are filenames without sample and .genes.bed ext
	panel_list_trunc.append(panel_trunc)


log_items = [
	('Start of the analysis:', date_time),
	('Analysing run:', runName),
	('List of all samples:', sample_list),
	('Aligner list from files:', aligner_list),
	('Design bed file:', config['BED_FILE']),
	('Panel bed file:', config['GENES_FILE']),
	('Transcripts file:', config['TRANSCRIPTS_FILE']),
	('Genes list file', config['LIST_GENES'])
]

for item in log_items:
	log_file(logfile, item[0], "\n", items_list=item[1] if isinstance(item[1], list) else None, items=item[1] if not isinstance(item[1], list) else None)

# Copy2 bed_file & genes_file & transcripts_file for debug
if config['DEBUG_MODE']:
	try:
		files_to_copy = (config['BED_FILE'], config['GENES_FILE'], config['TRANSCRIPTS_FILE'])
		for file_path in files_to_copy:
			copy2(file_path, inputDir)
	except FileNotFoundError:
		pass

################################################## RULES ##################################################

# check the number of sample for copy or merge vcf rule
sample_count = len(sample_list) 

ruleorder: copy_bam > copy_cram > cramtobam > indexing

if not config['BED_FILE']:
	rule all:
		"""	Rule will create an unfiltered vcf.gz and corresponding tsv	"""
		input:
			expand(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full.vcf.gz", sample=sample_list, aligner=aligner_list),
			f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Full.tsv"

else:
	rule all:
		"""	Rule will create an unfiltered vcf.gz & design vcf.gz and corresponding tsv	"""
		input:
			expand(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full.vcf.gz", sample=sample_list, aligner=aligner_list),
			expand(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Design.tsv", sample=sample_list, aligner=aligner_list),
			f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Full.tsv",
			f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Design.tsv"

rule help:
	"""
	General help for SCRAMBLE module
	Launch snakemake -s  snakefile_scramble -c(numberofthreads) --config run=absolutepathoftherundirectory
	To launch the snakemake file, use --config to replace variables that must be properly set for the pipeline to work ie run path directory
	Every variable defined in the yaml file can be change
	Separate multiple variable with a space (ex  --config DATA_DIR=runname transProb=0.05 var1=0.05 var2=12)
	Use option --configfile another.yaml to replace and merge existing config.yaml file variables
	Use -p to display shell commands
	Use --lt to display docstrings of rules
	Use -n for a dry run
	Input file = cram or bam files (if bai is needed, it will be generate)
	Output file = vcf annoted with AnnotSV 3.x for each sample/bam, and a global vcf file will all the samples ; a set of vcf files by design/panel
	"""

rule copy_bam:
	output: temp(f"{inputDir}/{{sample}}.{{aligner}}.bam")
	params:
		process=config['PROCESS_CMD'],
		download_link=lambda wildcards: runDict[wildcards.sample]['.bam']
	shell: "[ \"{params.process}\" = \"ls\" ] && ln -sfn {params.download_link} {output} || rsync -azvh {params.download_link} {output}"

rule copy_cram:
	output: temp(f"{inputDir}/{{sample}}.{{aligner}}.cram")
	params:
		process=config['PROCESS_CMD'],
		download_link=lambda wildcards: runDict[wildcards.sample]['.cram']
	shell: "[ \"{params.process}\" = \"ls\" ] && ln -sfn {params.download_link} {output} || rsync -azvh {params.download_link} {output}"

rule cramtobam:
	""" Extract bam from a cram file with samtools, need a reference genome """
	input: rules.copy_cram.output
	output: temp(f"{inputDir}/{{sample}}.{{aligner}}.bam")
	params: refgenome=config['REFGENEFA_PATH']
	shell: "samtools view -b -T {params.refgenome} -o {output} {input}"

rule indexing:
	""" Indexing bam files with samtools """
	input: f"{inputDir}/{{sample}}.{{aligner}}.bam"
	output: temp(f"{inputDir}/{{sample}}.{{aligner}}.bai")
	threads: workflow.cores
	shell: "samtools index -b -@ {threads} {input} {output}"

rule cluster_identifier:
	"""
	Cluster identifier will identify soft clipped clusters.
	The output is a tab delimited text file with clipped cluster consensus sequences. The columns are as follows:
	1. Coordinate
	2. Side of read where soft-clipped occurred
	3. Clipped read consensus
	4. Anchored read consensus
	Requirement : .bam file must have a .bai file associated in the same folder
	"""
	input:
		bam = f"{inputDir}/{{sample}}.{{aligner}}.bam",
		bai = f"{inputDir}/{{sample}}.{{aligner}}.bai",
	output: temp(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.clusters.txt")
	params:
		mini = config['m'],
		soft = config['s'],
		region = config['r']
	shell: "cluster_identifier -m {params.mini} -s {params.soft} -r {params.region} {input.bam} > {output}"

# Indels option : you will need a reference genome indexed with the following command for blast (indels mode) to work : makeblastdb -in refgene.fa -dbtype nucl
rule scramble:
	"""
	Calling SCRAMble.R with --eval-meis produces a tab delimited file. If a genomereference.fa file is provided, then a VCF is produced as well.
	The <out-name>_MEIs.txt output is a tab delimited text file with MEI calls. If no MEIs are present an output txt file will still be produced with only the header, and a dummy vcf will be output as well.
	Calling SCRAMble.R with --eval-dels produced a VCF and a tab delimted file. The <out-name>_PredictedDeletions.txt output is a tab delimited text file with deletion calls. If no deletions are present an output file will still be produced with only the header.
	"""
	input:
		rules.cluster_identifier.output
	params:
		scrambledir = config['SCRAMBLE_PATH'],
		refmei = config['REFMEI_PATH'],
		nCluster = config['nCluster'],
		meiscore = config['mei-score'],
		polyafrac = config['poly-a-frac'],
		polyadist = config['poly-a-dist'],
		mode = config['scramble_mode'],
		refgene = config['REFGENEFA_PATH'],
		dummypath = config['DUMMY_PATH'],
		output = f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.raw"
	output:
		f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.raw.vcf"
	log: 
		log = f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.ScrambleR.log", 
		err = f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.ScrambleR.err"
	shell:
		"""
		Rscript --vanilla {params.scrambledir}/SCRAMble.R \
		--cluster-file {input} \
		--out-name {params.output} \
		--install-dir {params.scrambledir} \
		--mei-refs {params.refmei} \
		--ref {params.refgene} \
		--mei-score {params.meiscore} --nCluster {params.nCluster} --poly-a-dist {params.polyadist} --poly-a-frac {params.polyafrac} {params.mode} > {log.log} 2> {log.err} && [[ -s {output} ]] || cat {params.dummypath}/empty.vcf > {output}
		"""

rule correctvcf:
	"""	Correction of vcf output, add sample name and genotype to be consistent with the vcf format specification """
	input: rules.scramble.output
	output: temp(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.corr.vcf")
	params:
		mode = config['scramble_mode'],
		dummypath = config['DUMMY_PATH']
	shell:
		"""
		if [ "{params.mode}" = "--eval-dels" ];
		then
		(grep "^##" {input} && echo '##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">' && grep "^#CHROM" {input} | awk -v SAMPLE={wildcards.sample} '{{print $0"\tFORMAT\t"SAMPLE}}' && grep "^#" -v {input} | awk '{{print $0"\tGT\t0/1"}}' | awk '{{FS=OFS="\t"}}; {{$4=substr($4, 0, 1); print}}' | awk '{{FS=OFS="\t"}} $3=="DEL" {{$5="<DEL>"}}1') > {output} && [[ -s {output} ]] || cat {params.dummypath}/empty.vcf > {output}
		else
		(grep "^##" {input} && echo '##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">' && grep "^#CHROM" {input} | awk -v SAMPLE={wildcards.sample} '{{print $0"\tFORMAT\t"SAMPLE}}' && grep "^#" -v {input} | awk '{{print $0"\tGT\t0/1"}}') > {output} && [[ -s {output} ]] || cat {params.dummypath}/empty.vcf > {output}
		fi
		"""

rule AnnotSV:
	"""
	Annotate and rank Structural Variations from a vcf file
	-annotationMode can be split by exons/introns or full by genes
	-txtFile: path to a file containing a list of preferred genes transcripts for annotation
	-genomeBuild must be specified if not hg19
	"""
	input: rules.correctvcf.output
	output: f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full_unsort.vcf"
	log: f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.log"
	params:
		output=f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full_unsort",
		genome=config['genomeBuild'],
		overlap=config['overlap'],
		mode=config['annotationMode'],
		dummypath = config['DUMMY_PATH'],
		annotation=config['annotationdir']
		# HPO -hpo HP:0001156,HP:0001363,HP:0011304"
	shell: 
		"""
		AnnotSV -SVinputFile {input} -outputFile {params.output} -annotationMode {params.mode} -annotationsDir {params.annotation} -txFile {annotation_file} -genomeBuild {params.genome} -overlap {params.overlap} -vcf 1 > {log} && [[ -s {output} ]]  || cat {params.dummypath}/emptyAnnotSV.vcf | sed 's/SAMPLENAME/{wildcards.sample}/g' > {output}
		"""

rule sortvcf:
	""" Sort vcf """
	input: rules.AnnotSV.output
	output: temp(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full_unfiltered.vcf")
	params: dummypath=config['DUMMY_PATH']
	shell: "grep '^#' {input} > {output} && grep -v '^#' {input} | sort -k1,1V -k2,2g >> {output} && [[ -s {output} ]] || cat {params.dummypath}/empty.vcf > {output}"

rule bcftools_filter:
	"""	Filter with bcftools """
	input: rules.sortvcf.output	
	output: temp(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full.vcf")
	params: bcf_filter = config['BCFTOOLS_FILTER']
	shell: "bcftools view {params.bcf_filter} {input} -o {output}"

rule vcf2gz:
	"""	Compress vcf with bgzip	"""
	input: rules.bcftools_filter.output
	output: f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full.vcf.gz"
	shell: "bgzip -c {input} > {output} ; tabix {output}"

rule cpvcffull:
	"""	Copy or merge vcfs with bcftools """
	input: expand(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Full.vcf.gz", aligner=aligner_list, sample=sample_list)
	output: tmpDir+"/"+serviceName+"."+date_time+".all.AnnotSV.Full.vcf.gz"
	shell: f"if [ {sample_count} -eq 1 ]; then cp {{input}} {{output}} && tabix {{output}}; else bcftools merge {{input}} -O z -o {{output}} && tabix {{output}}; fi"

rule filtervcfdesign:
	"""	Filter vcf with a bed file """
	input: rules.vcf2gz.output
	output: f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Design.vcf.gz"
	params:	bed=config['BED_FILE']
	shell:"bcftools view {input} -R {params.bed} -O z -o {output} && tabix {output}"

rule cpvcfdesign:
	"""	Copy or merge with bcftools several vcfs """
	input: expand(f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Design.vcf.gz", sample=sample_list, aligner=aligner_list)
	output:	f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Design.vcf.gz"
	shell: f"if [ {sample_count} -eq 1 ]; then cp {{input}} {{output}} && tabix {{output}}; else bcftools merge {{input}} -O z -o {{output}} && tabix {{output}}; fi"

rule vcf2tsv:
	""" vcf to tsv conversion """
	input: rules.filtervcfdesign.output
	output: f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.AnnotSV.Design.tsv"
	log: f"{tmpDir}/{{sample}}/{serviceName}/{{sample}}_{date_time}_{serviceName}/{serviceName}.{date_time}.{{sample}}.{{aligner}}.vcf2tsv_converter.log"
	shell: "vcf2tsvpy --keep_rejected_calls --input_vcf {input} --out_tsv {output} 2> {log}"

use rule vcf2tsv as vcf2tsv1 with:
	input: rules.cpvcfdesign.output
	output: f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Design.tsv"
	log: f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Design.vcf2tsv_converter.log"

use rule vcf2tsv as vcf2tsv2 with:
	input: rules.cpvcffull.output
	output: f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Full.tsv"
	log: f"{tmpDir}/{serviceName}.{date_time}.all.AnnotSV.Full.vcf2tsv_converter.log"

onstart:
	shell(f"touch {os.path.join(outputdir, f'{serviceName}Running.txt')}")
	with open(logfile, "a+") as f:
		f.write("\n")
		f.write("Global parameters of the analysis for debug only")
		json.dump(config, f, ensure_ascii=False, indent=2)
		f.write("\n")

onsuccess:
	include = config['INCLUDE_RSYNC']
	shell(f"touch {outputdir}/{serviceName}Running.txt")
	shell(f"touch {outputdir}/{serviceName}Complete.txt")
	date_time_end = datetime.now().strftime("%Y%m%d-%H%M%S")
	with open(logfile, "a+") as f:
		f.write(f"End of the analysis : {date_time_end}\n")
	
	# Clear existing output directories
	for sample in sample_list:
		shell(f"rm -f {outputdir}/{sample}/{serviceName}/* || true")
	
	# Copy results to the main output directory
	shell("rsync -azvh --include={include} --exclude='*' {tmpDir}/ {outputdir}")

	# Copy individual sample results to their respective directories
	for sample in sample_list:
		shell(f"cp {outputdir}/{sample}/{serviceName}/{sample}_{date_time}_{serviceName}/* {outputdir}/{sample}/{serviceName}/ || true")

	# Optionally, perform DEPOT_COPY
	if config['DEPOT_COPY']:
		shell("rsync -azvh --include={include} --exclude='*' {tmpDir}/ {depotdir}")
		for sample in sample_list:
			shell(f"cp {outputdir}/{sample}/{serviceName}/{sample}_{date_time}_{serviceName}/* {depotdir}/{sample}/{serviceName}/ || true")
	
	generate_html_report(runDict, 'output_report.html')

onerror:
	include_log = config['INCLUDE_LOG_RSYNC']
	shell(f"touch {config['OUTPUT_DIR']}/{serviceName}Failed.txt")
	# shell(f"rm -f {config['OUTPUT_DIR']}/{serviceName}Running.txt")
	shell("rsync -azvh --include={include_log} --exclude='*' {tmpDir}/ {outputdir}")